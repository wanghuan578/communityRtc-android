/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spirit.community.protocol.thrift.roomgate;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-09")
public class UpdateUserinfoReq implements org.apache.thrift.TBase<UpdateUserinfoReq, UpdateUserinfoReq._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateUserinfoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateUserinfoReq");

  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nick_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AVATAR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar_url", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SIGN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sign_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField BIRTHDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("birthdate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHINESE_ZODIAC_FIELD_DESC = new org.apache.thrift.protocol.TField("chinese_zodiac", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ZODIAC_FIELD_DESC = new org.apache.thrift.protocol.TField("zodiac", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BLOOD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("blood_type", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHARACTER_FIELD_DESC = new org.apache.thrift.protocol.TField("character", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CHEST_FIELD_DESC = new org.apache.thrift.protocol.TField("chest", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField WAIST_FIELD_DESC = new org.apache.thrift.protocol.TField("waist", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField HIP_FIELD_DESC = new org.apache.thrift.protocol.TField("hip", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UpdateUserinfoReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UpdateUserinfoReqTupleSchemeFactory();

  public java.lang.String nick_name; // required
  public java.lang.String avatar_url; // required
  public java.lang.String sign_name; // required
  public short gender; // required
  public java.lang.String birthdate; // required
  public java.lang.String chinese_zodiac; // required
  public java.lang.String zodiac; // required
  public java.lang.String blood_type; // required
  public java.lang.String interest; // required
  public java.lang.String character; // required
  public short chest; // required
  public short waist; // required
  public short hip; // required
  public java.lang.String address; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NICK_NAME((short)1, "nick_name"),
    AVATAR_URL((short)2, "avatar_url"),
    SIGN_NAME((short)3, "sign_name"),
    GENDER((short)4, "gender"),
    BIRTHDATE((short)5, "birthdate"),
    CHINESE_ZODIAC((short)6, "chinese_zodiac"),
    ZODIAC((short)7, "zodiac"),
    BLOOD_TYPE((short)8, "blood_type"),
    INTEREST((short)9, "interest"),
    CHARACTER((short)10, "character"),
    CHEST((short)11, "chest"),
    WAIST((short)12, "waist"),
    HIP((short)13, "hip"),
    ADDRESS((short)14, "address");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NICK_NAME
          return NICK_NAME;
        case 2: // AVATAR_URL
          return AVATAR_URL;
        case 3: // SIGN_NAME
          return SIGN_NAME;
        case 4: // GENDER
          return GENDER;
        case 5: // BIRTHDATE
          return BIRTHDATE;
        case 6: // CHINESE_ZODIAC
          return CHINESE_ZODIAC;
        case 7: // ZODIAC
          return ZODIAC;
        case 8: // BLOOD_TYPE
          return BLOOD_TYPE;
        case 9: // INTEREST
          return INTEREST;
        case 10: // CHARACTER
          return CHARACTER;
        case 11: // CHEST
          return CHEST;
        case 12: // WAIST
          return WAIST;
        case 13: // HIP
          return HIP;
        case 14: // ADDRESS
          return ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GENDER_ISSET_ID = 0;
  private static final int __CHEST_ISSET_ID = 1;
  private static final int __WAIST_ISSET_ID = 2;
  private static final int __HIP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nick_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR_URL, new org.apache.thrift.meta_data.FieldMetaData("avatar_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN_NAME, new org.apache.thrift.meta_data.FieldMetaData("sign_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BIRTHDATE, new org.apache.thrift.meta_data.FieldMetaData("birthdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHINESE_ZODIAC, new org.apache.thrift.meta_data.FieldMetaData("chinese_zodiac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZODIAC, new org.apache.thrift.meta_data.FieldMetaData("zodiac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOOD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("blood_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARACTER, new org.apache.thrift.meta_data.FieldMetaData("character", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHEST, new org.apache.thrift.meta_data.FieldMetaData("chest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.WAIST, new org.apache.thrift.meta_data.FieldMetaData("waist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.HIP, new org.apache.thrift.meta_data.FieldMetaData("hip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateUserinfoReq.class, metaDataMap);
  }

  public UpdateUserinfoReq() {
  }

  public UpdateUserinfoReq(
    java.lang.String nick_name,
    java.lang.String avatar_url,
    java.lang.String sign_name,
    short gender,
    java.lang.String birthdate,
    java.lang.String chinese_zodiac,
    java.lang.String zodiac,
    java.lang.String blood_type,
    java.lang.String interest,
    java.lang.String character,
    short chest,
    short waist,
    short hip,
    java.lang.String address)
  {
    this();
    this.nick_name = nick_name;
    this.avatar_url = avatar_url;
    this.sign_name = sign_name;
    this.gender = gender;
    setGenderIsSet(true);
    this.birthdate = birthdate;
    this.chinese_zodiac = chinese_zodiac;
    this.zodiac = zodiac;
    this.blood_type = blood_type;
    this.interest = interest;
    this.character = character;
    this.chest = chest;
    setChestIsSet(true);
    this.waist = waist;
    setWaistIsSet(true);
    this.hip = hip;
    setHipIsSet(true);
    this.address = address;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateUserinfoReq(UpdateUserinfoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNick_name()) {
      this.nick_name = other.nick_name;
    }
    if (other.isSetAvatar_url()) {
      this.avatar_url = other.avatar_url;
    }
    if (other.isSetSign_name()) {
      this.sign_name = other.sign_name;
    }
    this.gender = other.gender;
    if (other.isSetBirthdate()) {
      this.birthdate = other.birthdate;
    }
    if (other.isSetChinese_zodiac()) {
      this.chinese_zodiac = other.chinese_zodiac;
    }
    if (other.isSetZodiac()) {
      this.zodiac = other.zodiac;
    }
    if (other.isSetBlood_type()) {
      this.blood_type = other.blood_type;
    }
    if (other.isSetInterest()) {
      this.interest = other.interest;
    }
    if (other.isSetCharacter()) {
      this.character = other.character;
    }
    this.chest = other.chest;
    this.waist = other.waist;
    this.hip = other.hip;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
  }

  public UpdateUserinfoReq deepCopy() {
    return new UpdateUserinfoReq(this);
  }

  @Override
  public void clear() {
    this.nick_name = null;
    this.avatar_url = null;
    this.sign_name = null;
    setGenderIsSet(false);
    this.gender = 0;
    this.birthdate = null;
    this.chinese_zodiac = null;
    this.zodiac = null;
    this.blood_type = null;
    this.interest = null;
    this.character = null;
    setChestIsSet(false);
    this.chest = 0;
    setWaistIsSet(false);
    this.waist = 0;
    setHipIsSet(false);
    this.hip = 0;
    this.address = null;
  }

  public java.lang.String getNick_name() {
    return this.nick_name;
  }

  public UpdateUserinfoReq setNick_name(java.lang.String nick_name) {
    this.nick_name = nick_name;
    return this;
  }

  public void unsetNick_name() {
    this.nick_name = null;
  }

  /** Returns true if field nick_name is set (has been assigned a value) and false otherwise */
  public boolean isSetNick_name() {
    return this.nick_name != null;
  }

  public void setNick_nameIsSet(boolean value) {
    if (!value) {
      this.nick_name = null;
    }
  }

  public java.lang.String getAvatar_url() {
    return this.avatar_url;
  }

  public UpdateUserinfoReq setAvatar_url(java.lang.String avatar_url) {
    this.avatar_url = avatar_url;
    return this;
  }

  public void unsetAvatar_url() {
    this.avatar_url = null;
  }

  /** Returns true if field avatar_url is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar_url() {
    return this.avatar_url != null;
  }

  public void setAvatar_urlIsSet(boolean value) {
    if (!value) {
      this.avatar_url = null;
    }
  }

  public java.lang.String getSign_name() {
    return this.sign_name;
  }

  public UpdateUserinfoReq setSign_name(java.lang.String sign_name) {
    this.sign_name = sign_name;
    return this;
  }

  public void unsetSign_name() {
    this.sign_name = null;
  }

  /** Returns true if field sign_name is set (has been assigned a value) and false otherwise */
  public boolean isSetSign_name() {
    return this.sign_name != null;
  }

  public void setSign_nameIsSet(boolean value) {
    if (!value) {
      this.sign_name = null;
    }
  }

  public short getGender() {
    return this.gender;
  }

  public UpdateUserinfoReq setGender(short gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public java.lang.String getBirthdate() {
    return this.birthdate;
  }

  public UpdateUserinfoReq setBirthdate(java.lang.String birthdate) {
    this.birthdate = birthdate;
    return this;
  }

  public void unsetBirthdate() {
    this.birthdate = null;
  }

  /** Returns true if field birthdate is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthdate() {
    return this.birthdate != null;
  }

  public void setBirthdateIsSet(boolean value) {
    if (!value) {
      this.birthdate = null;
    }
  }

  public java.lang.String getChinese_zodiac() {
    return this.chinese_zodiac;
  }

  public UpdateUserinfoReq setChinese_zodiac(java.lang.String chinese_zodiac) {
    this.chinese_zodiac = chinese_zodiac;
    return this;
  }

  public void unsetChinese_zodiac() {
    this.chinese_zodiac = null;
  }

  /** Returns true if field chinese_zodiac is set (has been assigned a value) and false otherwise */
  public boolean isSetChinese_zodiac() {
    return this.chinese_zodiac != null;
  }

  public void setChinese_zodiacIsSet(boolean value) {
    if (!value) {
      this.chinese_zodiac = null;
    }
  }

  public java.lang.String getZodiac() {
    return this.zodiac;
  }

  public UpdateUserinfoReq setZodiac(java.lang.String zodiac) {
    this.zodiac = zodiac;
    return this;
  }

  public void unsetZodiac() {
    this.zodiac = null;
  }

  /** Returns true if field zodiac is set (has been assigned a value) and false otherwise */
  public boolean isSetZodiac() {
    return this.zodiac != null;
  }

  public void setZodiacIsSet(boolean value) {
    if (!value) {
      this.zodiac = null;
    }
  }

  public java.lang.String getBlood_type() {
    return this.blood_type;
  }

  public UpdateUserinfoReq setBlood_type(java.lang.String blood_type) {
    this.blood_type = blood_type;
    return this;
  }

  public void unsetBlood_type() {
    this.blood_type = null;
  }

  /** Returns true if field blood_type is set (has been assigned a value) and false otherwise */
  public boolean isSetBlood_type() {
    return this.blood_type != null;
  }

  public void setBlood_typeIsSet(boolean value) {
    if (!value) {
      this.blood_type = null;
    }
  }

  public java.lang.String getInterest() {
    return this.interest;
  }

  public UpdateUserinfoReq setInterest(java.lang.String interest) {
    this.interest = interest;
    return this;
  }

  public void unsetInterest() {
    this.interest = null;
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return this.interest != null;
  }

  public void setInterestIsSet(boolean value) {
    if (!value) {
      this.interest = null;
    }
  }

  public java.lang.String getCharacter() {
    return this.character;
  }

  public UpdateUserinfoReq setCharacter(java.lang.String character) {
    this.character = character;
    return this;
  }

  public void unsetCharacter() {
    this.character = null;
  }

  /** Returns true if field character is set (has been assigned a value) and false otherwise */
  public boolean isSetCharacter() {
    return this.character != null;
  }

  public void setCharacterIsSet(boolean value) {
    if (!value) {
      this.character = null;
    }
  }

  public short getChest() {
    return this.chest;
  }

  public UpdateUserinfoReq setChest(short chest) {
    this.chest = chest;
    setChestIsSet(true);
    return this;
  }

  public void unsetChest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHEST_ISSET_ID);
  }

  /** Returns true if field chest is set (has been assigned a value) and false otherwise */
  public boolean isSetChest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHEST_ISSET_ID);
  }

  public void setChestIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHEST_ISSET_ID, value);
  }

  public short getWaist() {
    return this.waist;
  }

  public UpdateUserinfoReq setWaist(short waist) {
    this.waist = waist;
    setWaistIsSet(true);
    return this;
  }

  public void unsetWaist() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WAIST_ISSET_ID);
  }

  /** Returns true if field waist is set (has been assigned a value) and false otherwise */
  public boolean isSetWaist() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WAIST_ISSET_ID);
  }

  public void setWaistIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WAIST_ISSET_ID, value);
  }

  public short getHip() {
    return this.hip;
  }

  public UpdateUserinfoReq setHip(short hip) {
    this.hip = hip;
    setHipIsSet(true);
    return this;
  }

  public void unsetHip() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HIP_ISSET_ID);
  }

  /** Returns true if field hip is set (has been assigned a value) and false otherwise */
  public boolean isSetHip() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HIP_ISSET_ID);
  }

  public void setHipIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HIP_ISSET_ID, value);
  }

  public java.lang.String getAddress() {
    return this.address;
  }

  public UpdateUserinfoReq setAddress(java.lang.String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NICK_NAME:
      if (value == null) {
        unsetNick_name();
      } else {
        setNick_name((java.lang.String)value);
      }
      break;

    case AVATAR_URL:
      if (value == null) {
        unsetAvatar_url();
      } else {
        setAvatar_url((java.lang.String)value);
      }
      break;

    case SIGN_NAME:
      if (value == null) {
        unsetSign_name();
      } else {
        setSign_name((java.lang.String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((java.lang.Short)value);
      }
      break;

    case BIRTHDATE:
      if (value == null) {
        unsetBirthdate();
      } else {
        setBirthdate((java.lang.String)value);
      }
      break;

    case CHINESE_ZODIAC:
      if (value == null) {
        unsetChinese_zodiac();
      } else {
        setChinese_zodiac((java.lang.String)value);
      }
      break;

    case ZODIAC:
      if (value == null) {
        unsetZodiac();
      } else {
        setZodiac((java.lang.String)value);
      }
      break;

    case BLOOD_TYPE:
      if (value == null) {
        unsetBlood_type();
      } else {
        setBlood_type((java.lang.String)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((java.lang.String)value);
      }
      break;

    case CHARACTER:
      if (value == null) {
        unsetCharacter();
      } else {
        setCharacter((java.lang.String)value);
      }
      break;

    case CHEST:
      if (value == null) {
        unsetChest();
      } else {
        setChest((java.lang.Short)value);
      }
      break;

    case WAIST:
      if (value == null) {
        unsetWaist();
      } else {
        setWaist((java.lang.Short)value);
      }
      break;

    case HIP:
      if (value == null) {
        unsetHip();
      } else {
        setHip((java.lang.Short)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NICK_NAME:
      return getNick_name();

    case AVATAR_URL:
      return getAvatar_url();

    case SIGN_NAME:
      return getSign_name();

    case GENDER:
      return getGender();

    case BIRTHDATE:
      return getBirthdate();

    case CHINESE_ZODIAC:
      return getChinese_zodiac();

    case ZODIAC:
      return getZodiac();

    case BLOOD_TYPE:
      return getBlood_type();

    case INTEREST:
      return getInterest();

    case CHARACTER:
      return getCharacter();

    case CHEST:
      return getChest();

    case WAIST:
      return getWaist();

    case HIP:
      return getHip();

    case ADDRESS:
      return getAddress();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NICK_NAME:
      return isSetNick_name();
    case AVATAR_URL:
      return isSetAvatar_url();
    case SIGN_NAME:
      return isSetSign_name();
    case GENDER:
      return isSetGender();
    case BIRTHDATE:
      return isSetBirthdate();
    case CHINESE_ZODIAC:
      return isSetChinese_zodiac();
    case ZODIAC:
      return isSetZodiac();
    case BLOOD_TYPE:
      return isSetBlood_type();
    case INTEREST:
      return isSetInterest();
    case CHARACTER:
      return isSetCharacter();
    case CHEST:
      return isSetChest();
    case WAIST:
      return isSetWaist();
    case HIP:
      return isSetHip();
    case ADDRESS:
      return isSetAddress();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateUserinfoReq)
      return this.equals((UpdateUserinfoReq)that);
    return false;
  }

  public boolean equals(UpdateUserinfoReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nick_name = true && this.isSetNick_name();
    boolean that_present_nick_name = true && that.isSetNick_name();
    if (this_present_nick_name || that_present_nick_name) {
      if (!(this_present_nick_name && that_present_nick_name))
        return false;
      if (!this.nick_name.equals(that.nick_name))
        return false;
    }

    boolean this_present_avatar_url = true && this.isSetAvatar_url();
    boolean that_present_avatar_url = true && that.isSetAvatar_url();
    if (this_present_avatar_url || that_present_avatar_url) {
      if (!(this_present_avatar_url && that_present_avatar_url))
        return false;
      if (!this.avatar_url.equals(that.avatar_url))
        return false;
    }

    boolean this_present_sign_name = true && this.isSetSign_name();
    boolean that_present_sign_name = true && that.isSetSign_name();
    if (this_present_sign_name || that_present_sign_name) {
      if (!(this_present_sign_name && that_present_sign_name))
        return false;
      if (!this.sign_name.equals(that.sign_name))
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_birthdate = true && this.isSetBirthdate();
    boolean that_present_birthdate = true && that.isSetBirthdate();
    if (this_present_birthdate || that_present_birthdate) {
      if (!(this_present_birthdate && that_present_birthdate))
        return false;
      if (!this.birthdate.equals(that.birthdate))
        return false;
    }

    boolean this_present_chinese_zodiac = true && this.isSetChinese_zodiac();
    boolean that_present_chinese_zodiac = true && that.isSetChinese_zodiac();
    if (this_present_chinese_zodiac || that_present_chinese_zodiac) {
      if (!(this_present_chinese_zodiac && that_present_chinese_zodiac))
        return false;
      if (!this.chinese_zodiac.equals(that.chinese_zodiac))
        return false;
    }

    boolean this_present_zodiac = true && this.isSetZodiac();
    boolean that_present_zodiac = true && that.isSetZodiac();
    if (this_present_zodiac || that_present_zodiac) {
      if (!(this_present_zodiac && that_present_zodiac))
        return false;
      if (!this.zodiac.equals(that.zodiac))
        return false;
    }

    boolean this_present_blood_type = true && this.isSetBlood_type();
    boolean that_present_blood_type = true && that.isSetBlood_type();
    if (this_present_blood_type || that_present_blood_type) {
      if (!(this_present_blood_type && that_present_blood_type))
        return false;
      if (!this.blood_type.equals(that.blood_type))
        return false;
    }

    boolean this_present_interest = true && this.isSetInterest();
    boolean that_present_interest = true && that.isSetInterest();
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (!this.interest.equals(that.interest))
        return false;
    }

    boolean this_present_character = true && this.isSetCharacter();
    boolean that_present_character = true && that.isSetCharacter();
    if (this_present_character || that_present_character) {
      if (!(this_present_character && that_present_character))
        return false;
      if (!this.character.equals(that.character))
        return false;
    }

    boolean this_present_chest = true;
    boolean that_present_chest = true;
    if (this_present_chest || that_present_chest) {
      if (!(this_present_chest && that_present_chest))
        return false;
      if (this.chest != that.chest)
        return false;
    }

    boolean this_present_waist = true;
    boolean that_present_waist = true;
    if (this_present_waist || that_present_waist) {
      if (!(this_present_waist && that_present_waist))
        return false;
      if (this.waist != that.waist)
        return false;
    }

    boolean this_present_hip = true;
    boolean that_present_hip = true;
    if (this_present_hip || that_present_hip) {
      if (!(this_present_hip && that_present_hip))
        return false;
      if (this.hip != that.hip)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNick_name()) ? 131071 : 524287);
    if (isSetNick_name())
      hashCode = hashCode * 8191 + nick_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetAvatar_url()) ? 131071 : 524287);
    if (isSetAvatar_url())
      hashCode = hashCode * 8191 + avatar_url.hashCode();

    hashCode = hashCode * 8191 + ((isSetSign_name()) ? 131071 : 524287);
    if (isSetSign_name())
      hashCode = hashCode * 8191 + sign_name.hashCode();

    hashCode = hashCode * 8191 + gender;

    hashCode = hashCode * 8191 + ((isSetBirthdate()) ? 131071 : 524287);
    if (isSetBirthdate())
      hashCode = hashCode * 8191 + birthdate.hashCode();

    hashCode = hashCode * 8191 + ((isSetChinese_zodiac()) ? 131071 : 524287);
    if (isSetChinese_zodiac())
      hashCode = hashCode * 8191 + chinese_zodiac.hashCode();

    hashCode = hashCode * 8191 + ((isSetZodiac()) ? 131071 : 524287);
    if (isSetZodiac())
      hashCode = hashCode * 8191 + zodiac.hashCode();

    hashCode = hashCode * 8191 + ((isSetBlood_type()) ? 131071 : 524287);
    if (isSetBlood_type())
      hashCode = hashCode * 8191 + blood_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterest()) ? 131071 : 524287);
    if (isSetInterest())
      hashCode = hashCode * 8191 + interest.hashCode();

    hashCode = hashCode * 8191 + ((isSetCharacter()) ? 131071 : 524287);
    if (isSetCharacter())
      hashCode = hashCode * 8191 + character.hashCode();

    hashCode = hashCode * 8191 + chest;

    hashCode = hashCode * 8191 + waist;

    hashCode = hashCode * 8191 + hip;

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UpdateUserinfoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNick_name()).compareTo(other.isSetNick_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNick_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nick_name, other.nick_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAvatar_url()).compareTo(other.isSetAvatar_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar_url, other.avatar_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSign_name()).compareTo(other.isSetSign_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign_name, other.sign_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBirthdate()).compareTo(other.isSetBirthdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthdate, other.birthdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChinese_zodiac()).compareTo(other.isSetChinese_zodiac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChinese_zodiac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chinese_zodiac, other.chinese_zodiac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZodiac()).compareTo(other.isSetZodiac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZodiac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zodiac, other.zodiac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlood_type()).compareTo(other.isSetBlood_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlood_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blood_type, other.blood_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCharacter()).compareTo(other.isSetCharacter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharacter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.character, other.character);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChest()).compareTo(other.isSetChest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chest, other.chest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWaist()).compareTo(other.isSetWaist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waist, other.waist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHip()).compareTo(other.isSetHip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hip, other.hip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UpdateUserinfoReq(");
    boolean first = true;

    sb.append("nick_name:");
    if (this.nick_name == null) {
      sb.append("null");
    } else {
      sb.append(this.nick_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatar_url:");
    if (this.avatar_url == null) {
      sb.append("null");
    } else {
      sb.append(this.avatar_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sign_name:");
    if (this.sign_name == null) {
      sb.append("null");
    } else {
      sb.append(this.sign_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthdate:");
    if (this.birthdate == null) {
      sb.append("null");
    } else {
      sb.append(this.birthdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chinese_zodiac:");
    if (this.chinese_zodiac == null) {
      sb.append("null");
    } else {
      sb.append(this.chinese_zodiac);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zodiac:");
    if (this.zodiac == null) {
      sb.append("null");
    } else {
      sb.append(this.zodiac);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blood_type:");
    if (this.blood_type == null) {
      sb.append("null");
    } else {
      sb.append(this.blood_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    if (this.interest == null) {
      sb.append("null");
    } else {
      sb.append(this.interest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("character:");
    if (this.character == null) {
      sb.append("null");
    } else {
      sb.append(this.character);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chest:");
    sb.append(this.chest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waist:");
    sb.append(this.waist);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hip:");
    sb.append(this.hip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateUserinfoReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateUserinfoReqStandardScheme getScheme() {
      return new UpdateUserinfoReqStandardScheme();
    }
  }

  private static class UpdateUserinfoReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<UpdateUserinfoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateUserinfoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nick_name = iprot.readString();
              struct.setNick_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AVATAR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar_url = iprot.readString();
              struct.setAvatar_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sign_name = iprot.readString();
              struct.setSign_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.gender = iprot.readI16();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIRTHDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthdate = iprot.readString();
              struct.setBirthdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHINESE_ZODIAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chinese_zodiac = iprot.readString();
              struct.setChinese_zodiacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ZODIAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zodiac = iprot.readString();
              struct.setZodiacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLOOD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blood_type = iprot.readString();
              struct.setBlood_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interest = iprot.readString();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHARACTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.character = iprot.readString();
              struct.setCharacterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHEST
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.chest = iprot.readI16();
              struct.setChestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WAIST
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.waist = iprot.readI16();
              struct.setWaistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HIP
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.hip = iprot.readI16();
              struct.setHipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateUserinfoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nick_name != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nick_name);
        oprot.writeFieldEnd();
      }
      if (struct.avatar_url != null) {
        oprot.writeFieldBegin(AVATAR_URL_FIELD_DESC);
        oprot.writeString(struct.avatar_url);
        oprot.writeFieldEnd();
      }
      if (struct.sign_name != null) {
        oprot.writeFieldBegin(SIGN_NAME_FIELD_DESC);
        oprot.writeString(struct.sign_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI16(struct.gender);
      oprot.writeFieldEnd();
      if (struct.birthdate != null) {
        oprot.writeFieldBegin(BIRTHDATE_FIELD_DESC);
        oprot.writeString(struct.birthdate);
        oprot.writeFieldEnd();
      }
      if (struct.chinese_zodiac != null) {
        oprot.writeFieldBegin(CHINESE_ZODIAC_FIELD_DESC);
        oprot.writeString(struct.chinese_zodiac);
        oprot.writeFieldEnd();
      }
      if (struct.zodiac != null) {
        oprot.writeFieldBegin(ZODIAC_FIELD_DESC);
        oprot.writeString(struct.zodiac);
        oprot.writeFieldEnd();
      }
      if (struct.blood_type != null) {
        oprot.writeFieldBegin(BLOOD_TYPE_FIELD_DESC);
        oprot.writeString(struct.blood_type);
        oprot.writeFieldEnd();
      }
      if (struct.interest != null) {
        oprot.writeFieldBegin(INTEREST_FIELD_DESC);
        oprot.writeString(struct.interest);
        oprot.writeFieldEnd();
      }
      if (struct.character != null) {
        oprot.writeFieldBegin(CHARACTER_FIELD_DESC);
        oprot.writeString(struct.character);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHEST_FIELD_DESC);
      oprot.writeI16(struct.chest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAIST_FIELD_DESC);
      oprot.writeI16(struct.waist);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIP_FIELD_DESC);
      oprot.writeI16(struct.hip);
      oprot.writeFieldEnd();
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateUserinfoReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateUserinfoReqTupleScheme getScheme() {
      return new UpdateUserinfoReqTupleScheme();
    }
  }

  private static class UpdateUserinfoReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<UpdateUserinfoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateUserinfoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNick_name()) {
        optionals.set(0);
      }
      if (struct.isSetAvatar_url()) {
        optionals.set(1);
      }
      if (struct.isSetSign_name()) {
        optionals.set(2);
      }
      if (struct.isSetGender()) {
        optionals.set(3);
      }
      if (struct.isSetBirthdate()) {
        optionals.set(4);
      }
      if (struct.isSetChinese_zodiac()) {
        optionals.set(5);
      }
      if (struct.isSetZodiac()) {
        optionals.set(6);
      }
      if (struct.isSetBlood_type()) {
        optionals.set(7);
      }
      if (struct.isSetInterest()) {
        optionals.set(8);
      }
      if (struct.isSetCharacter()) {
        optionals.set(9);
      }
      if (struct.isSetChest()) {
        optionals.set(10);
      }
      if (struct.isSetWaist()) {
        optionals.set(11);
      }
      if (struct.isSetHip()) {
        optionals.set(12);
      }
      if (struct.isSetAddress()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetNick_name()) {
        oprot.writeString(struct.nick_name);
      }
      if (struct.isSetAvatar_url()) {
        oprot.writeString(struct.avatar_url);
      }
      if (struct.isSetSign_name()) {
        oprot.writeString(struct.sign_name);
      }
      if (struct.isSetGender()) {
        oprot.writeI16(struct.gender);
      }
      if (struct.isSetBirthdate()) {
        oprot.writeString(struct.birthdate);
      }
      if (struct.isSetChinese_zodiac()) {
        oprot.writeString(struct.chinese_zodiac);
      }
      if (struct.isSetZodiac()) {
        oprot.writeString(struct.zodiac);
      }
      if (struct.isSetBlood_type()) {
        oprot.writeString(struct.blood_type);
      }
      if (struct.isSetInterest()) {
        oprot.writeString(struct.interest);
      }
      if (struct.isSetCharacter()) {
        oprot.writeString(struct.character);
      }
      if (struct.isSetChest()) {
        oprot.writeI16(struct.chest);
      }
      if (struct.isSetWaist()) {
        oprot.writeI16(struct.waist);
      }
      if (struct.isSetHip()) {
        oprot.writeI16(struct.hip);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateUserinfoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.nick_name = iprot.readString();
        struct.setNick_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.avatar_url = iprot.readString();
        struct.setAvatar_urlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sign_name = iprot.readString();
        struct.setSign_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gender = iprot.readI16();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.birthdate = iprot.readString();
        struct.setBirthdateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.chinese_zodiac = iprot.readString();
        struct.setChinese_zodiacIsSet(true);
      }
      if (incoming.get(6)) {
        struct.zodiac = iprot.readString();
        struct.setZodiacIsSet(true);
      }
      if (incoming.get(7)) {
        struct.blood_type = iprot.readString();
        struct.setBlood_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.interest = iprot.readString();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.character = iprot.readString();
        struct.setCharacterIsSet(true);
      }
      if (incoming.get(10)) {
        struct.chest = iprot.readI16();
        struct.setChestIsSet(true);
      }
      if (incoming.get(11)) {
        struct.waist = iprot.readI16();
        struct.setWaistIsSet(true);
      }
      if (incoming.get(12)) {
        struct.hip = iprot.readI16();
        struct.setHipIsSet(true);
      }
      if (incoming.get(13)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spirit.community.protocol.thrift.roomgate;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class ChatReq implements org.apache.thrift.TBase<ChatReq, ChatReq._Fields>, java.io.Serializable, Cloneable, Comparable<ChatReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatReq");

  private static final org.apache.thrift.protocol.TField FROM_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("from_nick_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TO_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("to_nick_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("chat_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHAT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("chat_text", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHAT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("chat_time", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChatReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChatReqTupleSchemeFactory();

  public java.lang.String from_nick_name; // required
  public java.lang.String to_nick_name; // required
  public int chat_type; // required
  public java.lang.String chat_text; // required
  public long chat_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_NICK_NAME((short)1, "from_nick_name"),
    TO_NICK_NAME((short)2, "to_nick_name"),
    CHAT_TYPE((short)3, "chat_type"),
    CHAT_TEXT((short)4, "chat_text"),
    CHAT_TIME((short)5, "chat_time");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_NICK_NAME
          return FROM_NICK_NAME;
        case 2: // TO_NICK_NAME
          return TO_NICK_NAME;
        case 3: // CHAT_TYPE
          return CHAT_TYPE;
        case 4: // CHAT_TEXT
          return CHAT_TEXT;
        case 5: // CHAT_TIME
          return CHAT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHAT_TYPE_ISSET_ID = 0;
  private static final int __CHAT_TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("from_nick_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("to_nick_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("chat_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHAT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("chat_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAT_TIME, new org.apache.thrift.meta_data.FieldMetaData("chat_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatReq.class, metaDataMap);
  }

  public ChatReq() {
  }

  public ChatReq(
    java.lang.String from_nick_name,
    java.lang.String to_nick_name,
    int chat_type,
    java.lang.String chat_text,
    long chat_time)
  {
    this();
    this.from_nick_name = from_nick_name;
    this.to_nick_name = to_nick_name;
    this.chat_type = chat_type;
    setChat_typeIsSet(true);
    this.chat_text = chat_text;
    this.chat_time = chat_time;
    setChat_timeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatReq(ChatReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFrom_nick_name()) {
      this.from_nick_name = other.from_nick_name;
    }
    if (other.isSetTo_nick_name()) {
      this.to_nick_name = other.to_nick_name;
    }
    this.chat_type = other.chat_type;
    if (other.isSetChat_text()) {
      this.chat_text = other.chat_text;
    }
    this.chat_time = other.chat_time;
  }

  public ChatReq deepCopy() {
    return new ChatReq(this);
  }

  @Override
  public void clear() {
    this.from_nick_name = null;
    this.to_nick_name = null;
    setChat_typeIsSet(false);
    this.chat_type = 0;
    this.chat_text = null;
    setChat_timeIsSet(false);
    this.chat_time = 0;
  }

  public java.lang.String getFrom_nick_name() {
    return this.from_nick_name;
  }

  public ChatReq setFrom_nick_name(java.lang.String from_nick_name) {
    this.from_nick_name = from_nick_name;
    return this;
  }

  public void unsetFrom_nick_name() {
    this.from_nick_name = null;
  }

  /** Returns true if field from_nick_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom_nick_name() {
    return this.from_nick_name != null;
  }

  public void setFrom_nick_nameIsSet(boolean value) {
    if (!value) {
      this.from_nick_name = null;
    }
  }

  public java.lang.String getTo_nick_name() {
    return this.to_nick_name;
  }

  public ChatReq setTo_nick_name(java.lang.String to_nick_name) {
    this.to_nick_name = to_nick_name;
    return this;
  }

  public void unsetTo_nick_name() {
    this.to_nick_name = null;
  }

  /** Returns true if field to_nick_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTo_nick_name() {
    return this.to_nick_name != null;
  }

  public void setTo_nick_nameIsSet(boolean value) {
    if (!value) {
      this.to_nick_name = null;
    }
  }

  public int getChat_type() {
    return this.chat_type;
  }

  public ChatReq setChat_type(int chat_type) {
    this.chat_type = chat_type;
    setChat_typeIsSet(true);
    return this;
  }

  public void unsetChat_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHAT_TYPE_ISSET_ID);
  }

  /** Returns true if field chat_type is set (has been assigned a value) and false otherwise */
  public boolean isSetChat_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHAT_TYPE_ISSET_ID);
  }

  public void setChat_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHAT_TYPE_ISSET_ID, value);
  }

  public java.lang.String getChat_text() {
    return this.chat_text;
  }

  public ChatReq setChat_text(java.lang.String chat_text) {
    this.chat_text = chat_text;
    return this;
  }

  public void unsetChat_text() {
    this.chat_text = null;
  }

  /** Returns true if field chat_text is set (has been assigned a value) and false otherwise */
  public boolean isSetChat_text() {
    return this.chat_text != null;
  }

  public void setChat_textIsSet(boolean value) {
    if (!value) {
      this.chat_text = null;
    }
  }

  public long getChat_time() {
    return this.chat_time;
  }

  public ChatReq setChat_time(long chat_time) {
    this.chat_time = chat_time;
    setChat_timeIsSet(true);
    return this;
  }

  public void unsetChat_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHAT_TIME_ISSET_ID);
  }

  /** Returns true if field chat_time is set (has been assigned a value) and false otherwise */
  public boolean isSetChat_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHAT_TIME_ISSET_ID);
  }

  public void setChat_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHAT_TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FROM_NICK_NAME:
      if (value == null) {
        unsetFrom_nick_name();
      } else {
        setFrom_nick_name((java.lang.String)value);
      }
      break;

    case TO_NICK_NAME:
      if (value == null) {
        unsetTo_nick_name();
      } else {
        setTo_nick_name((java.lang.String)value);
      }
      break;

    case CHAT_TYPE:
      if (value == null) {
        unsetChat_type();
      } else {
        setChat_type((java.lang.Integer)value);
      }
      break;

    case CHAT_TEXT:
      if (value == null) {
        unsetChat_text();
      } else {
        setChat_text((java.lang.String)value);
      }
      break;

    case CHAT_TIME:
      if (value == null) {
        unsetChat_time();
      } else {
        setChat_time((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_NICK_NAME:
      return getFrom_nick_name();

    case TO_NICK_NAME:
      return getTo_nick_name();

    case CHAT_TYPE:
      return getChat_type();

    case CHAT_TEXT:
      return getChat_text();

    case CHAT_TIME:
      return getChat_time();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FROM_NICK_NAME:
      return isSetFrom_nick_name();
    case TO_NICK_NAME:
      return isSetTo_nick_name();
    case CHAT_TYPE:
      return isSetChat_type();
    case CHAT_TEXT:
      return isSetChat_text();
    case CHAT_TIME:
      return isSetChat_time();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatReq)
      return this.equals((ChatReq)that);
    return false;
  }

  public boolean equals(ChatReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_from_nick_name = true && this.isSetFrom_nick_name();
    boolean that_present_from_nick_name = true && that.isSetFrom_nick_name();
    if (this_present_from_nick_name || that_present_from_nick_name) {
      if (!(this_present_from_nick_name && that_present_from_nick_name))
        return false;
      if (!this.from_nick_name.equals(that.from_nick_name))
        return false;
    }

    boolean this_present_to_nick_name = true && this.isSetTo_nick_name();
    boolean that_present_to_nick_name = true && that.isSetTo_nick_name();
    if (this_present_to_nick_name || that_present_to_nick_name) {
      if (!(this_present_to_nick_name && that_present_to_nick_name))
        return false;
      if (!this.to_nick_name.equals(that.to_nick_name))
        return false;
    }

    boolean this_present_chat_type = true;
    boolean that_present_chat_type = true;
    if (this_present_chat_type || that_present_chat_type) {
      if (!(this_present_chat_type && that_present_chat_type))
        return false;
      if (this.chat_type != that.chat_type)
        return false;
    }

    boolean this_present_chat_text = true && this.isSetChat_text();
    boolean that_present_chat_text = true && that.isSetChat_text();
    if (this_present_chat_text || that_present_chat_text) {
      if (!(this_present_chat_text && that_present_chat_text))
        return false;
      if (!this.chat_text.equals(that.chat_text))
        return false;
    }

    boolean this_present_chat_time = true;
    boolean that_present_chat_time = true;
    if (this_present_chat_time || that_present_chat_time) {
      if (!(this_present_chat_time && that_present_chat_time))
        return false;
      if (this.chat_time != that.chat_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFrom_nick_name()) ? 131071 : 524287);
    if (isSetFrom_nick_name())
      hashCode = hashCode * 8191 + from_nick_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTo_nick_name()) ? 131071 : 524287);
    if (isSetTo_nick_name())
      hashCode = hashCode * 8191 + to_nick_name.hashCode();

    hashCode = hashCode * 8191 + chat_type;

    hashCode = hashCode * 8191 + ((isSetChat_text()) ? 131071 : 524287);
    if (isSetChat_text())
      hashCode = hashCode * 8191 + chat_text.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(chat_time);

    return hashCode;
  }

  @Override
  public int compareTo(ChatReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFrom_nick_name()).compareTo(other.isSetFrom_nick_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom_nick_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from_nick_name, other.from_nick_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTo_nick_name()).compareTo(other.isSetTo_nick_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo_nick_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to_nick_name, other.to_nick_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChat_type()).compareTo(other.isSetChat_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChat_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chat_type, other.chat_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChat_text()).compareTo(other.isSetChat_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChat_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chat_text, other.chat_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChat_time()).compareTo(other.isSetChat_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChat_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chat_time, other.chat_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChatReq(");
    boolean first = true;

    sb.append("from_nick_name:");
    if (this.from_nick_name == null) {
      sb.append("null");
    } else {
      sb.append(this.from_nick_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to_nick_name:");
    if (this.to_nick_name == null) {
      sb.append("null");
    } else {
      sb.append(this.to_nick_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chat_type:");
    sb.append(this.chat_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chat_text:");
    if (this.chat_text == null) {
      sb.append("null");
    } else {
      sb.append(this.chat_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chat_time:");
    sb.append(this.chat_time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatReqStandardScheme getScheme() {
      return new ChatReqStandardScheme();
    }
  }

  private static class ChatReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChatReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.from_nick_name = iprot.readString();
              struct.setFrom_nick_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.to_nick_name = iprot.readString();
              struct.setTo_nick_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chat_type = iprot.readI32();
              struct.setChat_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHAT_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chat_text = iprot.readString();
              struct.setChat_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHAT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chat_time = iprot.readI64();
              struct.setChat_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.from_nick_name != null) {
        oprot.writeFieldBegin(FROM_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.from_nick_name);
        oprot.writeFieldEnd();
      }
      if (struct.to_nick_name != null) {
        oprot.writeFieldBegin(TO_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.to_nick_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHAT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.chat_type);
      oprot.writeFieldEnd();
      if (struct.chat_text != null) {
        oprot.writeFieldBegin(CHAT_TEXT_FIELD_DESC);
        oprot.writeString(struct.chat_text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHAT_TIME_FIELD_DESC);
      oprot.writeI64(struct.chat_time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatReqTupleScheme getScheme() {
      return new ChatReqTupleScheme();
    }
  }

  private static class ChatReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChatReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFrom_nick_name()) {
        optionals.set(0);
      }
      if (struct.isSetTo_nick_name()) {
        optionals.set(1);
      }
      if (struct.isSetChat_type()) {
        optionals.set(2);
      }
      if (struct.isSetChat_text()) {
        optionals.set(3);
      }
      if (struct.isSetChat_time()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetFrom_nick_name()) {
        oprot.writeString(struct.from_nick_name);
      }
      if (struct.isSetTo_nick_name()) {
        oprot.writeString(struct.to_nick_name);
      }
      if (struct.isSetChat_type()) {
        oprot.writeI32(struct.chat_type);
      }
      if (struct.isSetChat_text()) {
        oprot.writeString(struct.chat_text);
      }
      if (struct.isSetChat_time()) {
        oprot.writeI64(struct.chat_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.from_nick_name = iprot.readString();
        struct.setFrom_nick_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.to_nick_name = iprot.readString();
        struct.setTo_nick_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chat_type = iprot.readI32();
        struct.setChat_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chat_text = iprot.readString();
        struct.setChat_textIsSet(true);
      }
      if (incoming.get(4)) {
        struct.chat_time = iprot.readI64();
        struct.setChat_timeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

